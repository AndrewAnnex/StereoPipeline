INSTALLATION AND USE

A. Installing the Software

Stereo Pipeline pre-built binaries are available from two locations:

Official releases at:
  http://ti.arc.nasa.gov/tech/asr/intelligent-robotics/ngt/stereo/

Daily builds of the latest development version at:
  http://byss.arc.nasa.gov/stereopipeline/daily_build/

The software can be unpacked and used from where it was downloaded, 
hence no installation or administrative rights are necessary.

B. Using the Software

When you unpack the Stereo Pipeline tarball, it will contain a copy of
the documentation in pdf format, a set of command-line tools in the
"bin" directory, and other dependencies. The "bin" directory needs to
be in your path or one should invoke those tools using the full
path. See the README file for how to use Stereo Pipeline.

C. Installing from Source

If desired, Stereo Pipeline can be built from source code as
well. The source code is available at 

  https://github.com/NeoGeographyToolkit/StereoPipeline

Building from source can be difficult, due to the large number of
dependencies, and the variety of Linux and Mac architectures Stereo
Pipeline supports. A separate software package called BinaryBuilder
will take care of setting up the build environment and building the
code. We describe below what dependencies BinaryBuilder needs and then
how to invoke it.

1. Base dependencies - LINUX

It may be potentially easier to build Stereo Pipeline and its
dependencies in a virtual machine. How to set one up is described in
the file VIRTMACHINES.

The following packages need to be installed in order to build Stereo
Pipeline (this list is not exhaustive, see the precise commands
to install dependencies below):

Python (version >= 3 preferred, version >= 2.7 supported)
g++, gfortran (version >= 5.0)
cmake (version >= 3.11)
csh
libtool
autoconf
automake
openssl-dev
wget
curl
git (version >= 1.6) 
subversion
zip
xserver-xorg-dev
xorg-dev
libx11-dev
libxext-dev
libxmu
libxmu-dev
libxi-dev
libxcb-dev
libgl1-mesa-dev
libglu1-mesa-dev
freeglut3-dev
gtk2-dev

If you have root access on your machine you can install them on a
Debian-based distribution (for example Ubuntu version >= 16) using the
following command (note that sometimes the precise names of packages
may change):

sudo apt-get update -y
sudo apt-get install -y python g++ gfortran tcsh libtool libtool-bin                \
  m4 autoconf automake libssl-dev wget curl git subversion zip xserver-xorg-dev     \
  xorg-dev libx11-dev libxext-dev libxmu6 libxmu-dev libxi-dev                      \
  '^libxcb.*-dev' libx11-xcb-dev libgl1-mesa-dev libglu1-mesa-dev freeglut3-dev     \
  libgtk2.0-dev texlive-latex-base latexmk graphviz texinfo

If the package libtool-bin is not available (on older Linux versions),
it can be simply removed, as libtool has all the functionality. 

For Red Hat-based distributions (CentOS/RHEL version >= 6) one can do instead:

sudo yum update -y
sudo yum -y install python gcc-c++ gcc-gfortran tcsh libtool m4 autoconf            \
  automake openssl-devel wget curl git subversion xorg-x11-server-Xorg libX11-devel \
  libXext-devel libXmu libXmu-devel libXi-devel libxcb libxcb-devel xcb-util        \
  xcb-util-devel mesa-libGL-devel freeglut-devel gtk2-devel

If your git install fails on Red Hat, you may need to enable the EPEL
repository. 

It is important to check that the gcc, g++, and gfortran versions are
as above. If your gcc is too old, you can fetch and use devtoolset-3 
(on Red Hat, CentOS, etc).

Set: 
export LD_LIBRARY_PATH=<path to libstdc++ for your version compliant gcc>:$LD_LIBRARY_PATH

To build the documentation, one should install latex-mk from 
https://sourceforge.net/projects/latex-mk/files/latest/download

2. Base dependencies - MAC

First install Homebrew or Macports, if you do not already have it.

Next you need the following packages:

automake
libtool
openssl
git
wget 
curl
xz

Here's an example for how to install some of these. First read
http://superuser.com/questions/619498/can-i-install-homebrew-without-sudo-privileges
about how to install homebrew without sudo. Then do:

export HOMEBREW_PREFIX=$HOME/usr/local
export PATH=$HOMEBREW_PREFIX/bin:$PATH

brew update
brew doctor
brew install automake libtool openssl git wget curl xz
brew install gcc --with-fortran

(Use gcc version >= 5).

Set the following env variable:
export DYLD_LIBRARY_PATH=$HOME/local/lib/gcc/4.9/:$DYLD_LIBRARY_PATH

4. Setting up ISIS

ASP depends heavily on USGS ISIS and its dependencies. ISIS should
be built using cmake and conda using the following instructions:

https://github.com/USGS-Astrogeology/ISIS3/blob/dev/README.md
https://github.com/USGS-Astrogeology/ISIS3/wiki/Developing-ISIS3-with-cmake

If it is desired to build VisionWorkbench only, or ASP without ISIS
support, one need not build ISIS, but one still must invoke conda to
fetch the ISIS dependencies.

If building on CentOS 7.2 or SuSE 12, one should have gcc 5 and the
binutils package with the gold linker, and one should use the
environemnt in environment.yml rather than environment_gcc4.yml
mentioned there for CentOS.

3. Invoking Binary Builder

Having installed the tools, base libraries, and ISIS, the following lines of
code will start the build of Stereo Pipeline in the directory
'~/projects/BinaryBuilder':

cd ~; mkdir projects; cd projects
git clone https://github.com/NeoGeographyToolkit/BinaryBuilder.git
cd BinaryBuilder
source ./auto_build/utils.sh
./build.py --download-dir tarballs --build-root build_asp

If the conda packages were installed in a location other than
$HOME/miniconda3/envs/isis3, the path to that directory should be
set via --isis3-deps-dir.

Due to the amount of code that must be downloaded and built,
BinaryBuilder will take quite a while to finish.  If you see the
message "All done!" then it has succeeded.  Otherwise something has
gone wrong and must be fixed before the build can continue.  Often
this is due to one of the dependencies listed earlier being too old or
missing.

If the build failed and you need to restart it after finding a fix,
use the following command:

./build.py --download-dir tarballs --build-root build_asp --resume

Once the build is successful you should make a distribution tarball to
store the completed build. Do so using the following command from the
BinaryBuilder directory:

./make-dist.py last-completed-run/install

